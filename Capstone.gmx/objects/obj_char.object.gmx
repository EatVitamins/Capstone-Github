<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>108</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_friction</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0.5</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
//stats
if (room = rm_1) {
chp = 10
}
else if (room = rm_boss) {
chp = 1;
audio_play_sound(sd_boss,1,true);
};
kills = 0;
//sound
if(room = rm_1){
audio_play_sound(sd_arena,1,true)
}
//minimap
mheight = 100
mwidth = 100
mscale_y = mheight/room_height;
mscale_x = mwidth/room_width;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//timing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = rm_1){
if(instance_number(obj_enemy ) &lt;= 9) {
instance_create(random(room_width),random(room_height),obj_enemy);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//timing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//body position following the mouse
if (90 &lt;= point_direction(x,y,mouse_x,mouse_y)) {
    if (180 &gt;= point_direction(x,y,mouse_x,mouse_y)) {
    image_index = 2;
    image_xscale = -1;
    }
    if (180 &lt;= point_direction(x,y,mouse_x,mouse_y)) {
        if (270 &gt;= point_direction(x,y,mouse_x,mouse_y)) {
    image_index = 1;
    image_xscale = -1;
    }
    }
    if (270 &lt;= point_direction(x,y,mouse_x,mouse_y)){
        if (360 &gt;= point_direction(x,y,mouse_x,mouse_y)) {
        image_index = 1;
        image_xscale = 1
        }
        }
} 
else {
    image_index = 2;
    image_xscale = 1
}


/*
if ( 90 &lt;= point_direction(x,y,mouse_x,mouse_y)) {
    if (270 &gt;= point_direction(x,y,mouse_x,mouse_y)) {
image_xscale = -1;
}
else {
image_xscale = 1;
} 
}*/

if(speed &gt;= 4){
speed = 4
};

x = min(x,room_width - 16);
x = max(x,16);
y = min(y,room_height - 16);
y = max(y,16);


//shooting
if (mouse_check_button_pressed(mb_left) || keyboard_check_pressed(vk_space)) {
instance_create(obj_char.x,obj_char.y,obj_arrow);
};
if (mouse_check_button_pressed(mb_right) || keyboard_check_pressed(vk_alt)) {
if alarm[0] = -1 {
    if (alarm[3] = -1) {
instance_create(obj_char.x,obj_char.y,obj_shield);
alarm[3] = 60
alarm[0] = 60*3;
}
}
};
//ability
if (mouse_check_button_pressed(mb_middle) || keyboard_check_pressed(vk_control)) {
if alarm[2] = -1 {
instance_create(obj_char.x,obj_char.y,obj_fireball);
if (room = rm_1){
alarm[2] = 60*5;
}
else if (room = rm_boss){
alarm[2] = 60*2;
}
}
};

//moving
if (keyboard_check(vk_up) || keyboard_check(ord('W'))) {
vspeed -= 1;
    if (keyboard_check(vk_shift)) {
vspeed -= 2
}
};
if (keyboard_check(vk_left) || keyboard_check(ord('A'))) {
hspeed -= 1;
//image_xscale = -1
    if (keyboard_check(vk_shift)) {
hspeed -= 2
}
};
if (keyboard_check(vk_right) || keyboard_check(ord('D'))) {
hspeed += 1;
//image_xscale = 1;
    if (keyboard_check(vk_shift)) {
hspeed += 2
}
};
if (keyboard_check(vk_down) || keyboard_check(ord('S'))) {
vspeed += 1;
    if (keyboard_check(vk_shift)) {
vspeed += 2
}
};

//health
if (chp &lt;= 0) {
audio_stop_all();
room_goto(rm_die);
}
if (room = rm_1) {
//enemy spawn
if (alarm[1] = -1) {
 alarm[1] = 60*2
};
//kill check
if (kills &gt;= 20) {
audio_stop_all();
room_goto(rm_boss);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_colour(c_green)
draw_rectangle(view_xview + 40,view_yview + 20,view_xview + 16 + chp*10,view_yview + 24,false);
draw_set_colour(c_red);
draw_rectangle(view_xview + 40,view_yview + 30,view_xview + 44 + kills*3,view_yview + 26,false);
draw_sprite(spr_health,0,view_xview + 16,view_yview + 16);

/*
draw_set_colour(c_green)
draw_rectangle(hx,hy,hx + chp*10,hx + 3,false);
draw_set_colour(c_red);
draw_text(view_xview + 16,view_yview + 32,"kills =" + string(kills));
*/
// minimap
mx = view_xview + 390;
my = view_yview + 10;
draw_set_alpha(0.3);
draw_set_colour(c_black)
draw_rectangle(mx ,my ,mx + mwidth,my + mheight,false);
    //enemis on map

draw_set_colour(c_red);
draw_set_alpha(0.8);
var enemycount;
enemycount = instance_number(obj_enemy);
for(i = 0; i &lt; enemycount; i += 1) {
    enemyid = instance_find(obj_enemy , i)
    e_x = mx + enemyid.x*mscale_x;
    e_y = my + enemyid.y*mscale_y;
    draw_circle(e_x,e_y,2,false);
};
cmapx = mx + obj_char.x*mscale_x;
cmapy = my + obj_char.y*mscale_y;
draw_set_colour(c_aqua)
draw_circle(cmapx,cmapy,3,false);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
